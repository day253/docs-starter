// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "sdk/internal"
)

type SearchPlantsByStatusRequest struct {
	// The status of plants to search for.
	Status *SearchPlantsByStatusRequestStatus `json:"-" url:"status,omitempty"`
}

type SearchPlantsByTagsRequest struct {
	// Tags to filter plants (comma-separated).
	Tags []*string `json:"-" url:"tags,omitempty"`
}

type Plant struct {
	Name     *string      `json:"name,omitempty" url:"name,omitempty"`
	Category *string      `json:"category,omitempty" url:"category,omitempty"`
	Tags     []string     `json:"tags,omitempty" url:"tags,omitempty"`
	Status   *PlantStatus `json:"status,omitempty" url:"status,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *Plant) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *Plant) GetCategory() *string {
	if p == nil {
		return nil
	}
	return p.Category
}

func (p *Plant) GetTags() []string {
	if p == nil {
		return nil
	}
	return p.Tags
}

func (p *Plant) GetStatus() *PlantStatus {
	if p == nil {
		return nil
	}
	return p.Status
}

func (p *Plant) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Plant) UnmarshalJSON(data []byte) error {
	type unmarshaler Plant
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Plant(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *Plant) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PlantResponse struct {
	Id     *int     `json:"id,omitempty" url:"id,omitempty"`
	Name   *string  `json:"name,omitempty" url:"name,omitempty"`
	Status *string  `json:"status,omitempty" url:"status,omitempty"`
	Tags   []string `json:"tags,omitempty" url:"tags,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PlantResponse) GetId() *int {
	if p == nil {
		return nil
	}
	return p.Id
}

func (p *PlantResponse) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PlantResponse) GetStatus() *string {
	if p == nil {
		return nil
	}
	return p.Status
}

func (p *PlantResponse) GetTags() []string {
	if p == nil {
		return nil
	}
	return p.Tags
}

func (p *PlantResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlantResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PlantResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PlantResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlantResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PlantStatus string

const (
	PlantStatusAvailable PlantStatus = "available"
	PlantStatusPending   PlantStatus = "pending"
	PlantStatusSold      PlantStatus = "sold"
)

func NewPlantStatusFromString(s string) (PlantStatus, error) {
	switch s {
	case "available":
		return PlantStatusAvailable, nil
	case "pending":
		return PlantStatusPending, nil
	case "sold":
		return PlantStatusSold, nil
	}
	var t PlantStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PlantStatus) Ptr() *PlantStatus {
	return &p
}

type SearchPlantsByStatusRequestStatus string

const (
	SearchPlantsByStatusRequestStatusAvailable SearchPlantsByStatusRequestStatus = "available"
	SearchPlantsByStatusRequestStatusPending   SearchPlantsByStatusRequestStatus = "pending"
	SearchPlantsByStatusRequestStatusSold      SearchPlantsByStatusRequestStatus = "sold"
)

func NewSearchPlantsByStatusRequestStatusFromString(s string) (SearchPlantsByStatusRequestStatus, error) {
	switch s {
	case "available":
		return SearchPlantsByStatusRequestStatusAvailable, nil
	case "pending":
		return SearchPlantsByStatusRequestStatusPending, nil
	case "sold":
		return SearchPlantsByStatusRequestStatusSold, nil
	}
	var t SearchPlantsByStatusRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SearchPlantsByStatusRequestStatus) Ptr() *SearchPlantsByStatusRequestStatus {
	return &s
}
