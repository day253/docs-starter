/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.user;

import core.ClientOptions;
import core.ObjectMappers;
import core.PlantstoreApiApiException;
import core.PlantstoreApiException;
import core.QueryStringMapper;
import core.RequestOptions;
import java.io.IOException;
import java.lang.Object;
import java.lang.String;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import resources.user.requests.LoginUserRequest;
import types.User;
import types.UserAuthResponse;

public class UserClient {
  protected final ClientOptions clientOptions;

  public UserClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  public UserAuthResponse loginUser() {
    return loginUser(LoginUserRequest.builder().build());
  }

  public UserAuthResponse loginUser(LoginUserRequest request) {
    return loginUser(request,null);
  }

  public UserAuthResponse loginUser(LoginUserRequest request, RequestOptions requestOptions) {
    HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("user/auth/login");if (request.getUsername().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "username", request.getUsername().get(), false);
      }
      if (request.getPassword().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "password", request.getPassword().get(), false);
      }
      Request.Builder _requestBuilder = new Request.Builder()
        .url(httpUrl.build())
        .method("GET", null)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json")
        .addHeader("Accept", "application/json");
      Request okhttpRequest = _requestBuilder.build();
      OkHttpClient client = clientOptions.httpClient();
      if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
        client = clientOptions.httpClientWithTimeout(requestOptions);
      }
      try (Response response = client.newCall(okhttpRequest).execute()) {
        ResponseBody responseBody = response.body();
        if (response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UserAuthResponse.class);
        }
        String responseBodyString = responseBody != null ? responseBody.string() : "{}";
        throw new PlantstoreApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
      }
      catch (IOException e) {
        throw new PlantstoreApiException("Network error executing HTTP request", e);
      }
    }

    public void logoutUser() {
      logoutUser(null);
    }

    public void logoutUser(RequestOptions requestOptions) {
      HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

        .addPathSegments("user/auth/logout")
        .build();
      Request okhttpRequest = new Request.Builder()
        .url(httpUrl)
        .method("GET", null)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .build();
      OkHttpClient client = clientOptions.httpClient();
      if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
        client = clientOptions.httpClientWithTimeout(requestOptions);
      }
      try (Response response = client.newCall(okhttpRequest).execute()) {
        ResponseBody responseBody = response.body();
        if (response.isSuccessful()) {
          return;
        }
        String responseBodyString = responseBody != null ? responseBody.string() : "{}";
        throw new PlantstoreApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
      }
      catch (IOException e) {
        throw new PlantstoreApiException("Network error executing HTTP request", e);
      }
    }

    /**
     * Retrieve user details using their username.
     */
    public User getUserByName(String username) {
      return getUserByName(username,null);
    }

    /**
     * Retrieve user details using their username.
     */
    public User getUserByName(String username, RequestOptions requestOptions) {
      HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

        .addPathSegments("user")
        .addPathSegment(username)
        .build();
      Request okhttpRequest = new Request.Builder()
        .url(httpUrl)
        .method("GET", null)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json")
        .addHeader("Accept", "application/json")
        .build();
      OkHttpClient client = clientOptions.httpClient();
      if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
        client = clientOptions.httpClientWithTimeout(requestOptions);
      }
      try (Response response = client.newCall(okhttpRequest).execute()) {
        ResponseBody responseBody = response.body();
        if (response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), User.class);
        }
        String responseBodyString = responseBody != null ? responseBody.string() : "{}";
        throw new PlantstoreApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
      }
      catch (IOException e) {
        throw new PlantstoreApiException("Network error executing HTTP request", e);
      }
    }
  }
