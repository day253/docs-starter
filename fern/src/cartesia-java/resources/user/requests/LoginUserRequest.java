/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.user.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = LoginUserRequest.Builder.class
)
public final class LoginUserRequest {
  private final Optional<String> username;

  private final Optional<String> password;

  private final Map<String, Object> additionalProperties;

  private LoginUserRequest(Optional<String> username, Optional<String> password,
      Map<String, Object> additionalProperties) {
    this.username = username;
    this.password = password;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The username for login
   */
  @JsonProperty("username")
  public Optional<String> getUsername() {
    return username;
  }

  /**
   * @return The password for login
   */
  @JsonProperty("password")
  public Optional<String> getPassword() {
    return password;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof LoginUserRequest && equalTo((LoginUserRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(LoginUserRequest other) {
    return username.equals(other.username) && password.equals(other.password);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.username, this.password);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> username = Optional.empty();

    private Optional<String> password = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(LoginUserRequest other) {
      username(other.getUsername());
      password(other.getPassword());
      return this;
    }

    @JsonSetter(
        value = "username",
        nulls = Nulls.SKIP
    )
    public Builder username(Optional<String> username) {
      this.username = username;
      return this;
    }

    public Builder username(String username) {
      this.username = Optional.ofNullable(username);
      return this;
    }

    @JsonSetter(
        value = "password",
        nulls = Nulls.SKIP
    )
    public Builder password(Optional<String> password) {
      this.password = password;
      return this;
    }

    public Builder password(String password) {
      this.password = Optional.ofNullable(password);
      return this;
    }

    public LoginUserRequest build() {
      return new LoginUserRequest(username, password, additionalProperties);
    }
  }
}
