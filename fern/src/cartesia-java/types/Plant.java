/**
 * This file was auto-generated by Fern from our API Definition.
 */

package types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = Plant.Builder.class
)
public final class Plant {
  private final Optional<String> name;

  private final Optional<String> category;

  private final Optional<List<String>> tags;

  private final Optional<PlantStatus> status;

  private final Map<String, Object> additionalProperties;

  private Plant(Optional<String> name, Optional<String> category, Optional<List<String>> tags,
      Optional<PlantStatus> status, Map<String, Object> additionalProperties) {
    this.name = name;
    this.category = category;
    this.tags = tags;
    this.status = status;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("name")
  public Optional<String> getName() {
    return name;
  }

  @JsonProperty("category")
  public Optional<String> getCategory() {
    return category;
  }

  @JsonProperty("tags")
  public Optional<List<String>> getTags() {
    return tags;
  }

  @JsonProperty("status")
  public Optional<PlantStatus> getStatus() {
    return status;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Plant && equalTo((Plant) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(Plant other) {
    return name.equals(other.name) && category.equals(other.category) && tags.equals(other.tags) && status.equals(other.status);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.name, this.category, this.tags, this.status);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> name = Optional.empty();

    private Optional<String> category = Optional.empty();

    private Optional<List<String>> tags = Optional.empty();

    private Optional<PlantStatus> status = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(Plant other) {
      name(other.getName());
      category(other.getCategory());
      tags(other.getTags());
      status(other.getStatus());
      return this;
    }

    @JsonSetter(
        value = "name",
        nulls = Nulls.SKIP
    )
    public Builder name(Optional<String> name) {
      this.name = name;
      return this;
    }

    public Builder name(String name) {
      this.name = Optional.ofNullable(name);
      return this;
    }

    @JsonSetter(
        value = "category",
        nulls = Nulls.SKIP
    )
    public Builder category(Optional<String> category) {
      this.category = category;
      return this;
    }

    public Builder category(String category) {
      this.category = Optional.ofNullable(category);
      return this;
    }

    @JsonSetter(
        value = "tags",
        nulls = Nulls.SKIP
    )
    public Builder tags(Optional<List<String>> tags) {
      this.tags = tags;
      return this;
    }

    public Builder tags(List<String> tags) {
      this.tags = Optional.ofNullable(tags);
      return this;
    }

    @JsonSetter(
        value = "status",
        nulls = Nulls.SKIP
    )
    public Builder status(Optional<PlantStatus> status) {
      this.status = status;
      return this;
    }

    public Builder status(PlantStatus status) {
      this.status = Optional.ofNullable(status);
      return this;
    }

    public Plant build() {
      return new Plant(name, category, tags, status, additionalProperties);
    }
  }
}
