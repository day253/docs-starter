/**
 * This file was auto-generated by Fern from our API Definition.
 */

package types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = User.Builder.class
)
public final class User {
  private final Optional<Integer> id;

  private final Optional<String> username;

  private final Optional<String> email;

  private final Map<String, Object> additionalProperties;

  private User(Optional<Integer> id, Optional<String> username, Optional<String> email,
      Map<String, Object> additionalProperties) {
    this.id = id;
    this.username = username;
    this.email = email;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("id")
  public Optional<Integer> getId() {
    return id;
  }

  @JsonProperty("username")
  public Optional<String> getUsername() {
    return username;
  }

  @JsonProperty("email")
  public Optional<String> getEmail() {
    return email;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof User && equalTo((User) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(User other) {
    return id.equals(other.id) && username.equals(other.username) && email.equals(other.email);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.id, this.username, this.email);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> id = Optional.empty();

    private Optional<String> username = Optional.empty();

    private Optional<String> email = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(User other) {
      id(other.getId());
      username(other.getUsername());
      email(other.getEmail());
      return this;
    }

    @JsonSetter(
        value = "id",
        nulls = Nulls.SKIP
    )
    public Builder id(Optional<Integer> id) {
      this.id = id;
      return this;
    }

    public Builder id(Integer id) {
      this.id = Optional.ofNullable(id);
      return this;
    }

    @JsonSetter(
        value = "username",
        nulls = Nulls.SKIP
    )
    public Builder username(Optional<String> username) {
      this.username = username;
      return this;
    }

    public Builder username(String username) {
      this.username = Optional.ofNullable(username);
      return this;
    }

    @JsonSetter(
        value = "email",
        nulls = Nulls.SKIP
    )
    public Builder email(Optional<String> email) {
      this.email = email;
      return this;
    }

    public Builder email(String email) {
      this.email = Optional.ofNullable(email);
      return this;
    }

    public User build() {
      return new User(id, username, email, additionalProperties);
    }
  }
}
