/**
 * This file was auto-generated by Fern from our API Definition.
 */

package types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UserAuthResponse.Builder.class
)
public final class UserAuthResponse {
  private final Optional<String> token;

  private final Optional<Integer> expiresIn;

  private final Map<String, Object> additionalProperties;

  private UserAuthResponse(Optional<String> token, Optional<Integer> expiresIn,
      Map<String, Object> additionalProperties) {
    this.token = token;
    this.expiresIn = expiresIn;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return Authentication token
   */
  @JsonProperty("token")
  public Optional<String> getToken() {
    return token;
  }

  /**
   * @return Token expiration time in seconds
   */
  @JsonProperty("expiresIn")
  public Optional<Integer> getExpiresIn() {
    return expiresIn;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UserAuthResponse && equalTo((UserAuthResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(UserAuthResponse other) {
    return token.equals(other.token) && expiresIn.equals(other.expiresIn);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.token, this.expiresIn);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> token = Optional.empty();

    private Optional<Integer> expiresIn = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(UserAuthResponse other) {
      token(other.getToken());
      expiresIn(other.getExpiresIn());
      return this;
    }

    @JsonSetter(
        value = "token",
        nulls = Nulls.SKIP
    )
    public Builder token(Optional<String> token) {
      this.token = token;
      return this;
    }

    public Builder token(String token) {
      this.token = Optional.ofNullable(token);
      return this;
    }

    @JsonSetter(
        value = "expiresIn",
        nulls = Nulls.SKIP
    )
    public Builder expiresIn(Optional<Integer> expiresIn) {
      this.expiresIn = expiresIn;
      return this;
    }

    public Builder expiresIn(Integer expiresIn) {
      this.expiresIn = Optional.ofNullable(expiresIn);
      return this;
    }

    public UserAuthResponse build() {
      return new UserAuthResponse(token, expiresIn, additionalProperties);
    }
  }
}
