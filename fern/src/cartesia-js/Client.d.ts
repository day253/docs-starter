/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments";
import * as core from "./core";
import { Plant } from "./api/resources/plant/client/Client";
import { User } from "./api/resources/user/client/Client";
export declare namespace CartesiaClient {
    interface Options {
        environment?: core.Supplier<environments.CartesiaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class CartesiaClient {
    protected readonly _options: CartesiaClient.Options;
    protected _plant: Plant | undefined;
    protected _user: User | undefined;
    constructor(_options?: CartesiaClient.Options);
    get plant(): Plant;
    get user(): User;
}
