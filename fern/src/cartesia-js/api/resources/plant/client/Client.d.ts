/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Cartesia from "../../../index";
export declare namespace Plant {
    interface Options {
        environment?: core.Supplier<environments.CartesiaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
/**
 * Everything about your Plants
 */
export declare class Plant {
    protected readonly _options: Plant.Options;
    constructor(_options?: Plant.Options);
    /**
     * @param {Cartesia.Plant} request
     * @param {Plant.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cartesia.MethodNotAllowedError}
     *
     * @example
     *     await client.plant.addPlant({
     *         name: "Fern",
     *         category: "Indoor",
     *         tags: ["green", "leafy"],
     *         status: "available"
     *     })
     */
    addPlant(request: Cartesia.Plant, requestOptions?: Plant.RequestOptions): Promise<Cartesia.PlantResponse>;
    /**
     * @param {Cartesia.Plant} request
     * @param {Plant.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Cartesia.BadRequestError}
     * @throws {@link Cartesia.NotFoundError}
     *
     * @example
     *     await client.plant.updatePlant({
     *         name: "Fern",
     *         category: "Indoor",
     *         tags: ["green", "leafy"],
     *         status: "sold"
     *     })
     */
    updatePlant(request: Cartesia.Plant, requestOptions?: Plant.RequestOptions): Promise<Cartesia.PlantResponse>;
    /**
     * Filter plants based on their current status.
     *
     * @param {Cartesia.SearchPlantsByStatusRequest} request
     * @param {Plant.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.plant.searchPlantsByStatus()
     */
    searchPlantsByStatus(request?: Cartesia.SearchPlantsByStatusRequest, requestOptions?: Plant.RequestOptions): Promise<Cartesia.PlantResponse[]>;
    /**
     * Filter plants based on associated tags.
     *
     * @param {Cartesia.SearchPlantsByTagsRequest} request
     * @param {Plant.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.plant.searchPlantsByTags()
     */
    searchPlantsByTags(request?: Cartesia.SearchPlantsByTagsRequest, requestOptions?: Plant.RequestOptions): Promise<Cartesia.PlantResponse[]>;
    /**
     * Retrieve a plant's details by its ID.
     *
     * @param {number} plantId - ID of the plant to retrieve
     * @param {Plant.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.plant.getPlantById(1)
     */
    getPlantById(plantId: number, requestOptions?: Plant.RequestOptions): Promise<Cartesia.PlantResponse>;
}
