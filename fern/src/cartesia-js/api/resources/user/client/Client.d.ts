/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Cartesia from "../../../index";
export declare namespace User {
    interface Options {
        environment?: core.Supplier<environments.CartesiaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
/**
 * Operations about user
 */
export declare class User {
    protected readonly _options: User.Options;
    constructor(_options?: User.Options);
    /**
     * @param {Cartesia.LoginUserRequest} request
     * @param {User.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.user.loginUser()
     */
    loginUser(request?: Cartesia.LoginUserRequest, requestOptions?: User.RequestOptions): Promise<Cartesia.UserAuthResponse>;
    /**
     * @param {User.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.user.logoutUser()
     */
    logoutUser(requestOptions?: User.RequestOptions): Promise<void>;
    /**
     * Retrieve user details using their username.
     *
     * @param {string} username - Username of the user to retrieve
     * @param {User.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.user.getUserByName("username")
     */
    getUserByName(username: string, requestOptions?: User.RequestOptions): Promise<Cartesia.User>;
}
