# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..core.request_options import RequestOptions
from ..types.user_auth_response import UserAuthResponse
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.user import User
from ..core.jsonable_encoder import jsonable_encoder
from ..core.client_wrapper import AsyncClientWrapper


class UserClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def login_user(
        self,
        *,
        username: typing.Optional[str] = None,
        password: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserAuthResponse:
        """
        Parameters
        ----------
        username : typing.Optional[str]
            The username for login

        password : typing.Optional[str]
            The password for login

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserAuthResponse
            Successful login

        Examples
        --------
        from plantstore import Cartesia

        client = Cartesia()
        client.user.login_user()
        """
        _response = self._client_wrapper.httpx_client.request(
            "user/auth/login",
            method="GET",
            params={
                "username": username,
                "password": password,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UserAuthResponse,
                    parse_obj_as(
                        type_=UserAuthResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def logout_user(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from plantstore import Cartesia

        client = Cartesia()
        client.user.logout_user()
        """
        _response = self._client_wrapper.httpx_client.request(
            "user/auth/logout",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_user_by_name(
        self, username: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> User:
        """
        Retrieve user details using their username.

        Parameters
        ----------
        username : str
            Username of the user to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            User details retrieved successfully

        Examples
        --------
        from plantstore import Cartesia

        client = Cartesia()
        client.user.get_user_by_name(
            username="username",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"user/{jsonable_encoder(username)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    User,
                    parse_obj_as(
                        type_=User,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncUserClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def login_user(
        self,
        *,
        username: typing.Optional[str] = None,
        password: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserAuthResponse:
        """
        Parameters
        ----------
        username : typing.Optional[str]
            The username for login

        password : typing.Optional[str]
            The password for login

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserAuthResponse
            Successful login

        Examples
        --------
        import asyncio

        from plantstore import AsyncCartesia

        client = AsyncCartesia()


        async def main() -> None:
            await client.user.login_user()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "user/auth/login",
            method="GET",
            params={
                "username": username,
                "password": password,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UserAuthResponse,
                    parse_obj_as(
                        type_=UserAuthResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def logout_user(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from plantstore import AsyncCartesia

        client = AsyncCartesia()


        async def main() -> None:
            await client.user.logout_user()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "user/auth/logout",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_user_by_name(
        self, username: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> User:
        """
        Retrieve user details using their username.

        Parameters
        ----------
        username : str
            Username of the user to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            User details retrieved successfully

        Examples
        --------
        import asyncio

        from plantstore import AsyncCartesia

        client = AsyncCartesia()


        async def main() -> None:
            await client.user.get_user_by_name(
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"user/{jsonable_encoder(username)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    User,
                    parse_obj_as(
                        type_=User,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
